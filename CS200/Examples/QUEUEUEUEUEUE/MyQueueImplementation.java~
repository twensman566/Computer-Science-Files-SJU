package datastructures;

import java.util.*;

/** 
 * Class to implement interface MyQueue as an array.
 * 
 * @author Rahal
 * @version 09/16/2016
 */
public class MyQueueImplementation < ElementType > implements MyQueue<ElementType>{
  // Data Fields
  /** The default initial capacity */
  private static final int INITIAL_CAPACITY = 10;
  
  /** The underlying data array */
  private ElementType[] theData;
  
  /** The current size */
  private int size = 0;
  
  /** The current capacity */
  private int capacity = 0;
  
  /** 
   * Construct an empty MyQueueImplementation with the default
   * initial capacity
   */
  public MyQueueImplementation() {
    capacity = INITIAL_CAPACITY;
    theData = (ElementType[])new Object[capacity];
  }
  
  /**
   * @see datastructures.MyCollection#isEmpty
   */
  public boolean isEmpty(){
//**************************************COMPLETE ME ***********************************************
    return false;
  }
  
  /** 
   * @see datastructures.MyCollection#contains
   */
  public boolean contains(ElementType element){
//**************************************COMPLETE ME ***********************************************
    return false;
  }
  
  /**
   * @see datastructures.MyCollection#iterator
   */
  public Iterator<ElementType> iterator(){
//**************************************COMPLETE ME ***********************************************
    return null;
  }
  
  /**
   * @see datastructures.MyQueue#peek
   */
  public ElementType peek(){
//**************************************COMPLETE ME ***********************************************
    return null;
  }
  
  /**
   * @see datastructures.MyQueue#dequeue
   */
  public ElementType dequeue(){
//**************************************COMPLETE ME ***********************************************
    return null;
  }
  
  /**
   * @see datastructures.MyQueue#enqueue
   */
  public void enqueue(ElementType element){
//**************************************COMPLETE ME ***********************************************
  }
  
  /**
   * Helper method to double the  size of theData
   */
  private void reallocate() {
    capacity = 2 * capacity;
    ElementType[] newData = (ElementType[])new Object[capacity];
    System.arraycopy(theData, 0, newData, 0, size);
    theData = newData;
  } 
  
  /**
   * Class to implement Iterator interface needed for method iterator()
   */ 
  private  class InternalIterator implements Iterator<ElementType>{
    /** currentPosition used to traverse elements in the collection*/    
    private int currentPosition;
    
    /**
     * Constructor initializes currentPosition to 0
     */
    public InternalIterator(){
//**************************************COMPLETE ME ***********************************************
    }
    
    /**
     * @see java.util.Iterator#hasNext
     */     
    public boolean hasNext(){
//**************************************COMPLETE ME ***********************************************
      return false;
    }
    
    /**
     * @see java.util.Iterator#next
     */    
    public ElementType next(){
//**************************************COMPLETE ME ***********************************************
      return null;
    }
    
    /**
     * @see java.util.Iterator#remove
     * @throws UnsupportedOperationException because operation is not supported
     */ 
    public void remove(){
      throw new UnsupportedOperationException("Remove");
    }
    
  }
}
